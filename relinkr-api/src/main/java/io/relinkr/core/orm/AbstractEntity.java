/*
  Copyright [2018-2019] Laszlo Csontos (sole trader)

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

package io.relinkr.core.orm;

import java.io.Serializable;
import java.time.LocalDateTime;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.EntityListeners;
import javax.persistence.GeneratedValue;
import javax.persistence.MappedSuperclass;
import javax.persistence.Version;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;
import org.hibernate.annotations.GenericGenerator;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.domain.AbstractAggregateRoot;
import org.springframework.data.domain.Persistable;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import org.springframework.hateoas.Identifiable;

/**
 * Abstract base class of entity class and it provides common fields, such as {@code id},
 * {@code createdDate}, {@code lastModifiedDate} and {@code version}.
 *
 * <p>Entities' identifier is generated by {@link TimeBasedIdentifierGenerator}.
 *
 * <p>Fields {@code createdDate} and {@code lastModifiedDate} are set by Spring Data
 * (see {@link org.springframework.data.jpa.repository.config.EnableJpaAuditing}).
 *
 * <p>Field {@code version} is handled by JPA itself.
 *
 * @param <ID> ID type, must be a descendant of {@link AbstractId}.
 */
@Getter
@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
@EqualsAndHashCode(of = "id")
@ToString(of = "id")
public abstract class AbstractEntity<ID extends AbstractId<? extends AbstractEntity<ID>>>
    extends AbstractAggregateRoot implements Identifiable<ID>, Persistable<ID>, Serializable {

  @EmbeddedId
  @GeneratedValue(generator = "time-based")
  @GenericGenerator(
      name = "time-based",
      strategy = "io.relinkr.core.orm.TimeBasedIdentifierGenerator"
  )
  private ID id;

  @CreatedDate
  private LocalDateTime createdDate;

  @LastModifiedDate
  private LocalDateTime lastModifiedDate;

  @Version
  @Column(name = "version_")
  private Integer version;

  @Override
  public boolean isNew() {
    return getId() == null;
  }

  @Override
  public ID getId() {
    return id;
  }

  public void setId(ID id) {
    this.id = id;
  }

  public LocalDateTime getCreatedDate() {
    return createdDate;
  }

  public LocalDateTime getLastModifiedDate() {
    return lastModifiedDate;
  }

  public Integer getVersion() {
    return version;
  }

}
